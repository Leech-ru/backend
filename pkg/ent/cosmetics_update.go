// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Leech-ru/internal/domain/types"
	"Leech-ru/pkg/ent/cosmetics"
	"Leech-ru/pkg/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CosmeticsUpdate is the builder for updating Cosmetics entities.
type CosmeticsUpdate struct {
	config
	hooks    []Hook
	mutation *CosmeticsMutation
}

// Where appends a list predicates to the CosmeticsUpdate builder.
func (cu *CosmeticsUpdate) Where(ps ...predicate.Cosmetics) *CosmeticsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCategory sets the "category" field.
func (cu *CosmeticsUpdate) SetCategory(t types.Category) *CosmeticsUpdate {
	cu.mutation.ResetCategory()
	cu.mutation.SetCategory(t)
	return cu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableCategory(t *types.Category) *CosmeticsUpdate {
	if t != nil {
		cu.SetCategory(*t)
	}
	return cu
}

// AddCategory adds t to the "category" field.
func (cu *CosmeticsUpdate) AddCategory(t types.Category) *CosmeticsUpdate {
	cu.mutation.AddCategory(t)
	return cu
}

// SetTitle sets the "title" field.
func (cu *CosmeticsUpdate) SetTitle(s string) *CosmeticsUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableTitle(s *string) *CosmeticsUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CosmeticsUpdate) SetDescription(s string) *CosmeticsUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableDescription(s *string) *CosmeticsUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CosmeticsUpdate) ClearDescription() *CosmeticsUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetApplicationMethod sets the "applicationMethod" field.
func (cu *CosmeticsUpdate) SetApplicationMethod(s string) *CosmeticsUpdate {
	cu.mutation.SetApplicationMethod(s)
	return cu
}

// SetNillableApplicationMethod sets the "applicationMethod" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableApplicationMethod(s *string) *CosmeticsUpdate {
	if s != nil {
		cu.SetApplicationMethod(*s)
	}
	return cu
}

// ClearApplicationMethod clears the value of the "applicationMethod" field.
func (cu *CosmeticsUpdate) ClearApplicationMethod() *CosmeticsUpdate {
	cu.mutation.ClearApplicationMethod()
	return cu
}

// SetVolume sets the "volume" field.
func (cu *CosmeticsUpdate) SetVolume(i int) *CosmeticsUpdate {
	cu.mutation.ResetVolume()
	cu.mutation.SetVolume(i)
	return cu
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableVolume(i *int) *CosmeticsUpdate {
	if i != nil {
		cu.SetVolume(*i)
	}
	return cu
}

// AddVolume adds i to the "volume" field.
func (cu *CosmeticsUpdate) AddVolume(i int) *CosmeticsUpdate {
	cu.mutation.AddVolume(i)
	return cu
}

// ClearVolume clears the value of the "volume" field.
func (cu *CosmeticsUpdate) ClearVolume() *CosmeticsUpdate {
	cu.mutation.ClearVolume()
	return cu
}

// SetOzonLink sets the "ozon_link" field.
func (cu *CosmeticsUpdate) SetOzonLink(s string) *CosmeticsUpdate {
	cu.mutation.SetOzonLink(s)
	return cu
}

// SetNillableOzonLink sets the "ozon_link" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableOzonLink(s *string) *CosmeticsUpdate {
	if s != nil {
		cu.SetOzonLink(*s)
	}
	return cu
}

// ClearOzonLink clears the value of the "ozon_link" field.
func (cu *CosmeticsUpdate) ClearOzonLink() *CosmeticsUpdate {
	cu.mutation.ClearOzonLink()
	return cu
}

// SetWildberriesLink sets the "wildberries_link" field.
func (cu *CosmeticsUpdate) SetWildberriesLink(s string) *CosmeticsUpdate {
	cu.mutation.SetWildberriesLink(s)
	return cu
}

// SetNillableWildberriesLink sets the "wildberries_link" field if the given value is not nil.
func (cu *CosmeticsUpdate) SetNillableWildberriesLink(s *string) *CosmeticsUpdate {
	if s != nil {
		cu.SetWildberriesLink(*s)
	}
	return cu
}

// ClearWildberriesLink clears the value of the "wildberries_link" field.
func (cu *CosmeticsUpdate) ClearWildberriesLink() *CosmeticsUpdate {
	cu.mutation.ClearWildberriesLink()
	return cu
}

// Mutation returns the CosmeticsMutation object of the builder.
func (cu *CosmeticsUpdate) Mutation() *CosmeticsMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CosmeticsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CosmeticsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CosmeticsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CosmeticsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CosmeticsUpdate) check() error {
	if v, ok := cu.mutation.Category(); ok {
		if err := cosmetics.CategoryValidator(int(v)); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.category": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Title(); ok {
		if err := cosmetics.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Volume(); ok {
		if err := cosmetics.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.volume": %w`, err)}
		}
	}
	return nil
}

func (cu *CosmeticsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cosmetics.Table, cosmetics.Columns, sqlgraph.NewFieldSpec(cosmetics.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Category(); ok {
		_spec.SetField(cosmetics.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCategory(); ok {
		_spec.AddField(cosmetics.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(cosmetics.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(cosmetics.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(cosmetics.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.ApplicationMethod(); ok {
		_spec.SetField(cosmetics.FieldApplicationMethod, field.TypeString, value)
	}
	if cu.mutation.ApplicationMethodCleared() {
		_spec.ClearField(cosmetics.FieldApplicationMethod, field.TypeString)
	}
	if value, ok := cu.mutation.Volume(); ok {
		_spec.SetField(cosmetics.FieldVolume, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVolume(); ok {
		_spec.AddField(cosmetics.FieldVolume, field.TypeInt, value)
	}
	if cu.mutation.VolumeCleared() {
		_spec.ClearField(cosmetics.FieldVolume, field.TypeInt)
	}
	if value, ok := cu.mutation.OzonLink(); ok {
		_spec.SetField(cosmetics.FieldOzonLink, field.TypeString, value)
	}
	if cu.mutation.OzonLinkCleared() {
		_spec.ClearField(cosmetics.FieldOzonLink, field.TypeString)
	}
	if value, ok := cu.mutation.WildberriesLink(); ok {
		_spec.SetField(cosmetics.FieldWildberriesLink, field.TypeString, value)
	}
	if cu.mutation.WildberriesLinkCleared() {
		_spec.ClearField(cosmetics.FieldWildberriesLink, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cosmetics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CosmeticsUpdateOne is the builder for updating a single Cosmetics entity.
type CosmeticsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CosmeticsMutation
}

// SetCategory sets the "category" field.
func (cuo *CosmeticsUpdateOne) SetCategory(t types.Category) *CosmeticsUpdateOne {
	cuo.mutation.ResetCategory()
	cuo.mutation.SetCategory(t)
	return cuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableCategory(t *types.Category) *CosmeticsUpdateOne {
	if t != nil {
		cuo.SetCategory(*t)
	}
	return cuo
}

// AddCategory adds t to the "category" field.
func (cuo *CosmeticsUpdateOne) AddCategory(t types.Category) *CosmeticsUpdateOne {
	cuo.mutation.AddCategory(t)
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CosmeticsUpdateOne) SetTitle(s string) *CosmeticsUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableTitle(s *string) *CosmeticsUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CosmeticsUpdateOne) SetDescription(s string) *CosmeticsUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableDescription(s *string) *CosmeticsUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CosmeticsUpdateOne) ClearDescription() *CosmeticsUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetApplicationMethod sets the "applicationMethod" field.
func (cuo *CosmeticsUpdateOne) SetApplicationMethod(s string) *CosmeticsUpdateOne {
	cuo.mutation.SetApplicationMethod(s)
	return cuo
}

// SetNillableApplicationMethod sets the "applicationMethod" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableApplicationMethod(s *string) *CosmeticsUpdateOne {
	if s != nil {
		cuo.SetApplicationMethod(*s)
	}
	return cuo
}

// ClearApplicationMethod clears the value of the "applicationMethod" field.
func (cuo *CosmeticsUpdateOne) ClearApplicationMethod() *CosmeticsUpdateOne {
	cuo.mutation.ClearApplicationMethod()
	return cuo
}

// SetVolume sets the "volume" field.
func (cuo *CosmeticsUpdateOne) SetVolume(i int) *CosmeticsUpdateOne {
	cuo.mutation.ResetVolume()
	cuo.mutation.SetVolume(i)
	return cuo
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableVolume(i *int) *CosmeticsUpdateOne {
	if i != nil {
		cuo.SetVolume(*i)
	}
	return cuo
}

// AddVolume adds i to the "volume" field.
func (cuo *CosmeticsUpdateOne) AddVolume(i int) *CosmeticsUpdateOne {
	cuo.mutation.AddVolume(i)
	return cuo
}

// ClearVolume clears the value of the "volume" field.
func (cuo *CosmeticsUpdateOne) ClearVolume() *CosmeticsUpdateOne {
	cuo.mutation.ClearVolume()
	return cuo
}

// SetOzonLink sets the "ozon_link" field.
func (cuo *CosmeticsUpdateOne) SetOzonLink(s string) *CosmeticsUpdateOne {
	cuo.mutation.SetOzonLink(s)
	return cuo
}

// SetNillableOzonLink sets the "ozon_link" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableOzonLink(s *string) *CosmeticsUpdateOne {
	if s != nil {
		cuo.SetOzonLink(*s)
	}
	return cuo
}

// ClearOzonLink clears the value of the "ozon_link" field.
func (cuo *CosmeticsUpdateOne) ClearOzonLink() *CosmeticsUpdateOne {
	cuo.mutation.ClearOzonLink()
	return cuo
}

// SetWildberriesLink sets the "wildberries_link" field.
func (cuo *CosmeticsUpdateOne) SetWildberriesLink(s string) *CosmeticsUpdateOne {
	cuo.mutation.SetWildberriesLink(s)
	return cuo
}

// SetNillableWildberriesLink sets the "wildberries_link" field if the given value is not nil.
func (cuo *CosmeticsUpdateOne) SetNillableWildberriesLink(s *string) *CosmeticsUpdateOne {
	if s != nil {
		cuo.SetWildberriesLink(*s)
	}
	return cuo
}

// ClearWildberriesLink clears the value of the "wildberries_link" field.
func (cuo *CosmeticsUpdateOne) ClearWildberriesLink() *CosmeticsUpdateOne {
	cuo.mutation.ClearWildberriesLink()
	return cuo
}

// Mutation returns the CosmeticsMutation object of the builder.
func (cuo *CosmeticsUpdateOne) Mutation() *CosmeticsMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CosmeticsUpdate builder.
func (cuo *CosmeticsUpdateOne) Where(ps ...predicate.Cosmetics) *CosmeticsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CosmeticsUpdateOne) Select(field string, fields ...string) *CosmeticsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cosmetics entity.
func (cuo *CosmeticsUpdateOne) Save(ctx context.Context) (*Cosmetics, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CosmeticsUpdateOne) SaveX(ctx context.Context) *Cosmetics {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CosmeticsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CosmeticsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CosmeticsUpdateOne) check() error {
	if v, ok := cuo.mutation.Category(); ok {
		if err := cosmetics.CategoryValidator(int(v)); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.category": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Title(); ok {
		if err := cosmetics.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Volume(); ok {
		if err := cosmetics.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.volume": %w`, err)}
		}
	}
	return nil
}

func (cuo *CosmeticsUpdateOne) sqlSave(ctx context.Context) (_node *Cosmetics, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cosmetics.Table, cosmetics.Columns, sqlgraph.NewFieldSpec(cosmetics.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cosmetics.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cosmetics.FieldID)
		for _, f := range fields {
			if !cosmetics.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cosmetics.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Category(); ok {
		_spec.SetField(cosmetics.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCategory(); ok {
		_spec.AddField(cosmetics.FieldCategory, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(cosmetics.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(cosmetics.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(cosmetics.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.ApplicationMethod(); ok {
		_spec.SetField(cosmetics.FieldApplicationMethod, field.TypeString, value)
	}
	if cuo.mutation.ApplicationMethodCleared() {
		_spec.ClearField(cosmetics.FieldApplicationMethod, field.TypeString)
	}
	if value, ok := cuo.mutation.Volume(); ok {
		_spec.SetField(cosmetics.FieldVolume, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVolume(); ok {
		_spec.AddField(cosmetics.FieldVolume, field.TypeInt, value)
	}
	if cuo.mutation.VolumeCleared() {
		_spec.ClearField(cosmetics.FieldVolume, field.TypeInt)
	}
	if value, ok := cuo.mutation.OzonLink(); ok {
		_spec.SetField(cosmetics.FieldOzonLink, field.TypeString, value)
	}
	if cuo.mutation.OzonLinkCleared() {
		_spec.ClearField(cosmetics.FieldOzonLink, field.TypeString)
	}
	if value, ok := cuo.mutation.WildberriesLink(); ok {
		_spec.SetField(cosmetics.FieldWildberriesLink, field.TypeString, value)
	}
	if cuo.mutation.WildberriesLinkCleared() {
		_spec.ClearField(cosmetics.FieldWildberriesLink, field.TypeString)
	}
	_node = &Cosmetics{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cosmetics.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
