// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Leech-ru/internal/domain/schema"
	"Leech-ru/pkg/ent/refreshtoken"
	"Leech-ru/pkg/ent/user"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	refreshtokenFields := schema.RefreshToken{}.Fields()
	_ = refreshtokenFields
	// refreshtokenDescJti is the schema descriptor for jti field.
	refreshtokenDescJti := refreshtokenFields[1].Descriptor()
	// refreshtoken.JtiValidator is a validator for the "jti" field. It is called by the builders before save.
	refreshtoken.JtiValidator = refreshtokenDescJti.Validators[0].(func(string) error)
	// refreshtokenDescID is the schema descriptor for id field.
	refreshtokenDescID := refreshtokenFields[0].Descriptor()
	// refreshtoken.DefaultID holds the default value on creation for the id field.
	refreshtoken.DefaultID = refreshtokenDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[3].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescSurname is the schema descriptor for surname field.
	userDescSurname := userFields[4].Descriptor()
	// user.SurnameValidator is a validator for the "surname" field. It is called by the builders before save.
	user.SurnameValidator = func() func(string) error {
		validators := userDescSurname.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(surname string) error {
			for _, fn := range fns {
				if err := fn(surname); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[5].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(int)
}
