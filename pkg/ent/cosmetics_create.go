// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Leech-ru/internal/domain/types"
	"Leech-ru/pkg/ent/cosmetics"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CosmeticsCreate is the builder for creating a Cosmetics entity.
type CosmeticsCreate struct {
	config
	mutation *CosmeticsMutation
	hooks    []Hook
}

// SetCategory sets the "category" field.
func (cc *CosmeticsCreate) SetCategory(t types.Category) *CosmeticsCreate {
	cc.mutation.SetCategory(t)
	return cc
}

// SetTitle sets the "title" field.
func (cc *CosmeticsCreate) SetTitle(s string) *CosmeticsCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CosmeticsCreate) SetDescription(s string) *CosmeticsCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CosmeticsCreate) SetNillableDescription(s *string) *CosmeticsCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetApplicationMethod sets the "applicationMethod" field.
func (cc *CosmeticsCreate) SetApplicationMethod(s string) *CosmeticsCreate {
	cc.mutation.SetApplicationMethod(s)
	return cc
}

// SetNillableApplicationMethod sets the "applicationMethod" field if the given value is not nil.
func (cc *CosmeticsCreate) SetNillableApplicationMethod(s *string) *CosmeticsCreate {
	if s != nil {
		cc.SetApplicationMethod(*s)
	}
	return cc
}

// SetVolume sets the "volume" field.
func (cc *CosmeticsCreate) SetVolume(i int) *CosmeticsCreate {
	cc.mutation.SetVolume(i)
	return cc
}

// SetNillableVolume sets the "volume" field if the given value is not nil.
func (cc *CosmeticsCreate) SetNillableVolume(i *int) *CosmeticsCreate {
	if i != nil {
		cc.SetVolume(*i)
	}
	return cc
}

// SetOzonLink sets the "ozon_link" field.
func (cc *CosmeticsCreate) SetOzonLink(s string) *CosmeticsCreate {
	cc.mutation.SetOzonLink(s)
	return cc
}

// SetNillableOzonLink sets the "ozon_link" field if the given value is not nil.
func (cc *CosmeticsCreate) SetNillableOzonLink(s *string) *CosmeticsCreate {
	if s != nil {
		cc.SetOzonLink(*s)
	}
	return cc
}

// SetWildberriesLink sets the "wildberries_link" field.
func (cc *CosmeticsCreate) SetWildberriesLink(s string) *CosmeticsCreate {
	cc.mutation.SetWildberriesLink(s)
	return cc
}

// SetNillableWildberriesLink sets the "wildberries_link" field if the given value is not nil.
func (cc *CosmeticsCreate) SetNillableWildberriesLink(s *string) *CosmeticsCreate {
	if s != nil {
		cc.SetWildberriesLink(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CosmeticsCreate) SetID(u uuid.UUID) *CosmeticsCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CosmeticsCreate) SetNillableID(u *uuid.UUID) *CosmeticsCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// Mutation returns the CosmeticsMutation object of the builder.
func (cc *CosmeticsCreate) Mutation() *CosmeticsMutation {
	return cc.mutation
}

// Save creates the Cosmetics in the database.
func (cc *CosmeticsCreate) Save(ctx context.Context) (*Cosmetics, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CosmeticsCreate) SaveX(ctx context.Context) *Cosmetics {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CosmeticsCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CosmeticsCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CosmeticsCreate) defaults() {
	if _, ok := cc.mutation.Description(); !ok {
		v := cosmetics.DefaultDescription
		cc.mutation.SetDescription(v)
	}
	if _, ok := cc.mutation.ApplicationMethod(); !ok {
		v := cosmetics.DefaultApplicationMethod
		cc.mutation.SetApplicationMethod(v)
	}
	if _, ok := cc.mutation.OzonLink(); !ok {
		v := cosmetics.DefaultOzonLink
		cc.mutation.SetOzonLink(v)
	}
	if _, ok := cc.mutation.WildberriesLink(); !ok {
		v := cosmetics.DefaultWildberriesLink
		cc.mutation.SetWildberriesLink(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := cosmetics.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CosmeticsCreate) check() error {
	if _, ok := cc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Cosmetics.category"`)}
	}
	if v, ok := cc.mutation.Category(); ok {
		if err := cosmetics.CategoryValidator(int(v)); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.category": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Cosmetics.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := cosmetics.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.title": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Volume(); ok {
		if err := cosmetics.VolumeValidator(v); err != nil {
			return &ValidationError{Name: "volume", err: fmt.Errorf(`ent: validator failed for field "Cosmetics.volume": %w`, err)}
		}
	}
	return nil
}

func (cc *CosmeticsCreate) sqlSave(ctx context.Context) (*Cosmetics, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CosmeticsCreate) createSpec() (*Cosmetics, *sqlgraph.CreateSpec) {
	var (
		_node = &Cosmetics{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cosmetics.Table, sqlgraph.NewFieldSpec(cosmetics.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(cosmetics.FieldCategory, field.TypeInt, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(cosmetics.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(cosmetics.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := cc.mutation.ApplicationMethod(); ok {
		_spec.SetField(cosmetics.FieldApplicationMethod, field.TypeString, value)
		_node.ApplicationMethod = &value
	}
	if value, ok := cc.mutation.Volume(); ok {
		_spec.SetField(cosmetics.FieldVolume, field.TypeInt, value)
		_node.Volume = &value
	}
	if value, ok := cc.mutation.OzonLink(); ok {
		_spec.SetField(cosmetics.FieldOzonLink, field.TypeString, value)
		_node.OzonLink = &value
	}
	if value, ok := cc.mutation.WildberriesLink(); ok {
		_spec.SetField(cosmetics.FieldWildberriesLink, field.TypeString, value)
		_node.WildberriesLink = &value
	}
	return _node, _spec
}

// CosmeticsCreateBulk is the builder for creating many Cosmetics entities in bulk.
type CosmeticsCreateBulk struct {
	config
	err      error
	builders []*CosmeticsCreate
}

// Save creates the Cosmetics entities in the database.
func (ccb *CosmeticsCreateBulk) Save(ctx context.Context) ([]*Cosmetics, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cosmetics, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CosmeticsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CosmeticsCreateBulk) SaveX(ctx context.Context) []*Cosmetics {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CosmeticsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CosmeticsCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
