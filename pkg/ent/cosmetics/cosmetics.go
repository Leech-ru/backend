// Code generated by ent, DO NOT EDIT.

package cosmetics

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cosmetics type in the database.
	Label = "cosmetics"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldApplicationMethod holds the string denoting the applicationmethod field in the database.
	FieldApplicationMethod = "application_method"
	// FieldVolume holds the string denoting the volume field in the database.
	FieldVolume = "volume"
	// Table holds the table name of the cosmetics in the database.
	Table = "cosmetics"
)

// Columns holds all SQL columns for cosmetics fields.
var Columns = []string{
	FieldID,
	FieldCategory,
	FieldTitle,
	FieldDescription,
	FieldApplicationMethod,
	FieldVolume,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(int) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultApplicationMethod holds the default value on creation for the "applicationMethod" field.
	DefaultApplicationMethod string
	// VolumeValidator is a validator for the "volume" field. It is called by the builders before save.
	VolumeValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Cosmetics queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByApplicationMethod orders the results by the applicationMethod field.
func ByApplicationMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplicationMethod, opts...).ToFunc()
}

// ByVolume orders the results by the volume field.
func ByVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVolume, opts...).ToFunc()
}
